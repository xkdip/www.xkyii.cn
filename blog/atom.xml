<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.xkyii.cn/blog</id>
    <title>鱼猫小栈 Blog</title>
    <updated>2022-01-29T08:22:44.912Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.xkyii.cn/blog"/>
    <subtitle>鱼猫小栈 Blog</subtitle>
    <icon>https://www.xkyii.cn/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[hi,开通留念]]></title>
        <id>/2021/2021.11.24-hi</id>
        <link href="https://www.xkyii.cn/blog/2021/2021.11.24-hi"/>
        <updated>2022-01-29T08:22:44.912Z</updated>
        <summary type="html"><![CDATA[希望这次可以持续下去.]]></summary>
        <content type="html"><![CDATA[<p>希望这次可以持续下去.</p><p>:mask:</p>]]></content>
        <author>
            <name>xkyii</name>
            <uri>https://github.com/xkyii</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React中每次输入都失焦的一种情况]]></title>
        <id>/2022/2022.01.27-react-blur-every-input</id>
        <link href="https://www.xkyii.cn/blog/2022/2022.01.27-react-blur-every-input"/>
        <updated>2022-01-29T08:22:44.912Z</updated>
        <summary type="html"><![CDATA[问题]]></summary>
        <content type="html"><![CDATA[<h2>问题</h2><ul><li>主组件使用函数式组件</li><li>子组件使用函数式组件</li></ul><h3>核心代码:</h3><pre><code class="language-js">import { useState } from &quot;react&quot;;


export default function Home() {
  // 同步值
  const [value, setValue] = useState(&#x27;&#x27;);

  // 响应input输入
  const onInput = (value) =&gt; {
    setValue(value);
  };

  // 失焦组件,每次输入完都会失去焦点
  const InnerInput = ({ n, onInput }) =&gt; {
    return (
      &lt;&gt;
        &lt;label&gt;输入3&lt;/label&gt;
        &lt;input type=&#x27;text&#x27; value={n} onInput={e =&gt; onInput(e.target.value)} /&gt;
        &lt;span&gt;(失焦)&lt;/span&gt;
        &lt;br /&gt;
      &lt;/&gt;
    );
  }

  return (
    &lt;div&gt;
      &lt;label&gt;输入1&lt;/label&gt;
      &lt;input type=&#x27;text&#x27; value={value} onInput={e =&gt; onInput(e.target.value)} /&gt;
      &lt;br /&gt;

      &lt;label&gt;输入2&lt;/label&gt;
      &lt;input type=&#x27;text&#x27; value={value} onInput={e =&gt; onInput(e.target.value)} /&gt;
      &lt;br /&gt;

      &lt;InnerInput n={value} onInput={onInput} /&gt;

    &lt;/div&gt;
  )
}

</code></pre><p>在<strong>输入1</strong>和<strong>输入2</strong>的<code>input</code>组件中输入内容时,会相互同步,并且焦点会保持在正在输入的<code>input</code>中;</p><p>但在<strong>输入3</strong>的<code>input</code>组件中输入内容时,没输入一个字符,就会失去焦点;</p><h3>元素分析</h3><p>为了进一步了解其中发生了什么,我们用<strong>Chrome</strong>的调试工具观察一下:</p><p><img src="../../assets/material/2022/01/20220127-153911.gif"/></p><p>可以看到,每次输入时,<strong>输入1</strong>和<strong>输入2</strong>只有<code>input.value</code>产生了变化,而<strong>输入3</strong>的每一个组件都是重新渲染的.</p><p>这可能要归结到<code>React</code>渲染的问题了,当然这我是无法触及及解决的,只能想想别的办法.</p><h2>解决</h2><p>经过一番查阅,有方案是固定组件<code>key</code>,也有使用<code>ref</code>的,不过可能不对应我这种情况,</p><p>因为毕竟<code>InnerInput</code>也算一个内部<code>lambda</code>函数,每次调用<code>render</code>调用时,都会生成一个新的<code>InnerInput</code>,那每次都都生成新的组件也就不奇怪了.</p><p>所以我试着把<code>InnerInput</code>提取到外面,改为<code>OutterInput</code>,万万没想到可以用了 :dog:</p><p>当然,把<code>OutterInput</code>提取到单独的文件中同样有效.</p><p>修改后的代码如下:</p><pre><code class="language-js">import { useState } from &quot;react&quot;;


const OutterInput = ({ n, onInput }) =&gt; {
  return (
    &lt;&gt;
      &lt;label&gt;输入4&lt;/label&gt;
      &lt;input type=&#x27;text&#x27; value={n} onInput={e =&gt; onInput(e.target.value)} /&gt;
      &lt;br /&gt;
    &lt;/&gt;
  );
}

export default function Home() {
  // 同步值
  const [value, setValue] = useState(&#x27;&#x27;);

  // 响应input输入
  const onInput = (value) =&gt; {
    setValue(value);
  };

  // 失焦组件,每次输入完都会失去焦点
  const InnerInput = ({ n, onInput }) =&gt; {
    return (
      &lt;&gt;
        &lt;label&gt;输入3&lt;/label&gt;
        &lt;input type=&#x27;text&#x27; value={n} onInput={e =&gt; onInput(e.target.value)} /&gt;
        &lt;span&gt;(失焦)&lt;/span&gt;
        &lt;br /&gt;
      &lt;/&gt;
    );
  }

  return (
    &lt;div&gt;

      &lt;label&gt;输入1&lt;/label&gt;
      &lt;input type=&#x27;text&#x27; value={value} onInput={e =&gt; onInput(e.target.value)} /&gt;
      &lt;br /&gt;

      &lt;label&gt;输入2&lt;/label&gt;
      &lt;input type=&#x27;text&#x27; value={value} onInput={e =&gt; onInput(e.target.value)} /&gt;
      &lt;br /&gt;

      &lt;InnerInput n={value} onInput={onInput} /&gt;

      &lt;OutterInput n={value} onInput={onInput} /&gt;

    &lt;/div&gt;
  )
}

</code></pre>]]></content>
        <author>
            <name>xkyii</name>
            <uri>https://github.com/xkyii</uri>
        </author>
    </entry>
</feed>